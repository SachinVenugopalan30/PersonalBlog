---
import Navigation from '../components/Navigation';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Personal portfolio of Sachin - Full-stack developer and photographer passionate about creating beautiful, functional experiences." } = Astro.props;
const year = new Date().getFullYear();

// Import smoothScroll module here so Astro bundles it into the build
import '../utils/smoothScroll';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content="#141423" />
    
    <meta name="generator" content={Astro.generator} />
    
    <!-- Preconnect to external fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- SEO Meta Tags -->
    <meta name="author" content="Sachin" />
    <meta name="keywords" content="developer, photographer, portfolio, web development, React, TypeScript, Astro" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    
    <title>{title}</title>
  </head>
  <body class="bg-background text-text antialiased">
    <div class="relative min-h-screen">
      <!-- Animated Silky Background -->
      <div class="fixed inset-0 -z-10 silky-background"></div>
      
      <!-- Navigation -->
      <Navigation client:load />
      
      <!-- Main content -->
      <slot />
    </div>

  <script>
    // Add page load animation (run after DOM is ready)
    const applyLoadAnimation = () => {
      // start from invisible and slightly translated
      document.body.style.opacity = '0';
      document.body.style.transform = 'translateY(20px)';
      // apply transition and show
      setTimeout(() => {
        document.body.style.transition = 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
        document.body.style.opacity = '1';
        document.body.style.transform = 'translateY(0)';
      }, 100);
    };

    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      // DOM already ready
      applyLoadAnimation();
    } else {
      document.addEventListener('DOMContentLoaded', applyLoadAnimation);
    }
  </script>

  <script is:inline define:vars={{ 
    websiteId: import.meta.env.PUBLIC_UMAMI_WEBSITE_ID,
    apiUrl: import.meta.env.PUBLIC_UMAMI_API_URL,
    enabled: import.meta.env.PUBLIC_ANALYTICS_ENABLED
  }}>
    // Analytics configuration from environment variables
    const ANALYTICS_CONFIG = {
      websiteId: websiteId || '',
      apiUrl: apiUrl || '',
      enabled: (enabled === 'true' || enabled === true) && websiteId && apiUrl
    };

    console.log('üîß Analytics: Config loaded', {
      websiteId: ANALYTICS_CONFIG.websiteId ? ANALYTICS_CONFIG.websiteId.slice(0, 8) + '...' : 'missing',
      apiUrl: ANALYTICS_CONFIG.apiUrl || 'missing',
      enabled: ANALYTICS_CONFIG.enabled
    });

    // Privacy-focused analytics implementation
    class PrivateAnalytics {
      constructor(config) {
        this.config = config;
        this.hasTracked = false;
      }

      isBot() {
        const userAgent = navigator.userAgent.toLowerCase();
        const botPatterns = [
          'googlebot', 'bingbot', 'slurp', 'duckduckbot', 'baiduspider',
          'yandexbot', 'facebookexternalhit', 'twitterbot', 'linkedinbot',
          'whatsapp', 'telegrambot', 'applebot', 'crawler', 'spider',
          'bot', 'crawl', 'search', 'index', 'monitor', 'test', 'lighthouse',
          'gtmetrix', 'pingdom', 'uptimerobot', 'statuspage'
        ];

        const isBotUA = botPatterns.some(pattern => userAgent.includes(pattern));
        const isHeadless = navigator.webdriver || window.phantom || window.callPhantom || window._phantom;
        const isAutomated = window.Cypress || window.selenium || window.webdriver;
        const lacksFeatures = !navigator.cookieEnabled || !window.localStorage || !document.createElement;

        return isBotUA || isHeadless || isAutomated || lacksFeatures;
      }

      generateVisitorHash() {
        const components = [
          navigator.language,
          screen.width + 'x' + screen.height,
          screen.colorDepth,
          new Date().getTimezoneOffset(),
          navigator.platform,
          navigator.hardwareConcurrency || 'unknown'
        ];

        const dataString = components.join('|');
        let hash = 0;
        for (let i = 0; i < dataString.length; i++) {
          const char = dataString.charCodeAt(i);
          hash = ((hash << 5) - hash) + char;
          hash = hash & hash;
        }

        return Math.abs(hash).toString(36);
      }

      hasVisitedToday() {
        const today = new Date().toISOString().split('T')[0];
        const storageKey = `analytics_visit_${today}`;
        const visitorHash = this.generateVisitorHash();
        
        try {
          const visitedHashes = JSON.parse(localStorage.getItem(storageKey) || '[]');
          return visitedHashes.includes(visitorHash);
        } catch {
          return false;
        }
      }

      markAsVisited() {
        const today = new Date().toISOString().split('T')[0];
        const storageKey = `analytics_visit_${today}`;
        const visitorHash = this.generateVisitorHash();
        
        try {
          const visitedHashes = JSON.parse(localStorage.getItem(storageKey) || '[]');
          if (!visitedHashes.includes(visitorHash)) {
            visitedHashes.push(visitorHash);
            localStorage.setItem(storageKey, JSON.stringify(visitedHashes));
          }
        } catch {
          // Ignore localStorage errors
        }
      }

      async sendTrackingData(data) {
        if (!this.config.enabled) return;

        try {
          const requestData = {
            type: 'event',
            payload: {
              website: this.config.websiteId,
              hostname: window.location.hostname,
              language: navigator.language,
              referrer: document.referrer || '',
              screen: `${screen.width}x${screen.height}`,
              title: document.title,
              url: window.location.pathname,
              name: data.name || 'pageview'
            }
          };

          console.debug('üì§ Analytics: Sending request', requestData);

          const response = await fetch(`${this.config.apiUrl}/api/send`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData)
          });
          
          if (response.ok) {
            console.log('‚úÖ Analytics: Unique visit tracked successfully');
          } else {
            const errorText = await response.text();
            console.debug('‚ùå Analytics: Server responded with', response.status, errorText);
          }
        } catch (error) {
          console.debug('‚ùå Analytics tracking failed:', error);
        }
      }

      async trackVisit(pageName) {
        if (this.hasTracked) {
          console.debug('üìä Analytics: Already tracked in this session');
          return;
        }

        if (this.isBot()) {
          console.debug('ü§ñ Analytics: Bot detected, skipping');
          return;
        }

        if (this.hasVisitedToday()) {
          console.debug('üìÖ Analytics: Already tracked today, skipping');
          return;
        }

        await this.sendTrackingData({
          name: 'pageview'
        });

        this.markAsVisited();
        this.hasTracked = true;
      }
    }

    // Initialize analytics
    if (ANALYTICS_CONFIG.enabled) {
      const analytics = new PrivateAnalytics(ANALYTICS_CONFIG);
      
      const initializeAnalytics = () => {
        console.log('üöÄ Analytics: Initializing...');
        setTimeout(() => {
          analytics.trackVisit();
        }, 1000);
      };

      if (document.readyState === 'complete' || document.readyState === 'interactive') {
        initializeAnalytics();
      } else {
        document.addEventListener('DOMContentLoaded', initializeAnalytics);
      }
    } else {
      console.debug('‚ö†Ô∏è Analytics: Disabled or not configured');
    }
  </script>


  </body>
</html>

<style>
  /* Import global styles */
  @import '../styles/global.css';
  
  /* Smooth scrolling enhancement */
  html {
    scroll-behavior: smooth;
  }
  
  /* Custom scrollbar for webkit browsers */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: rgba(20, 20, 35, 0.8);
  }
  
  ::-webkit-scrollbar-thumb {
    background: rgba(255, 58, 32, 0.6);
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 58, 32, 0.8);
  }

  @keyframes animated-gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .silky-background {
    background: linear-gradient(-45deg, #031F2B, #021A24, #042F40, #031A20);
    background-size: 400% 400%;
    animation: animated-gradient 20s ease infinite;
  }
</style>
